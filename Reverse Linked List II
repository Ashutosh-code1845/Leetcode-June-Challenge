/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* A, int left, int right) {
            if(A==NULL || A->next==NULL)
    return A;
    int m=left;
    int n=right;
    ListNode *prev=NULL;
    ListNode *curr=A;
    while(m>1)
    {
        prev=curr;
        curr=curr->next;
        m--;
        n--;
    }
    ListNode *con=prev;
    ListNode *tail=curr;
    ListNode *third=NULL;
    while(n>0)
    {
        third=curr->next;
        curr->next=prev;
        prev=curr;
        curr=third;
        n--;
    }
    if(con!=NULL)
    {
        con->next=prev;
    }
    else
    {
        A=prev;
    }
    tail->next=curr;
    return A;
    }
};
