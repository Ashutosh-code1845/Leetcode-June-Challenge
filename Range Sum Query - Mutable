class NumArray {
public:
    vector<int> bittree, num;
    
    void init(int i, int val) {
		i = i + 1;
		while (i <= bittree.size() - 1) {
			bittree[i] += val;
			i += (i & -i);
		}
	}
    
    NumArray(vector<int>& nums) {
        num = nums;
        bittree.resize(nums.size() + 1, 0);
        for (int i = 0; i < nums.size(); i++) 
            init(i, nums[i]); 
    }
    
    int getSum(int i) { 
        int sum = 0;
        i = i + 1; 
        while (i > 0) { 
            sum += bittree[i]; 
            i -= i & (-i); 
        } 
        return sum; 
    }
    
    void update(int i, int val) {
		int diff = val - num[i];
		num[i] = val;
		init(i, diff);
	}
    
    int sumRange(int i, int j) {
        int sum = getSum(j) - getSum(i - 1);
        return sum;
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */
